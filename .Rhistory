2+2
install.packages("epitools")
install.packages("epitools")
x<-10
x
t=10
t
x<-10
2+2
10
library("epitools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
log(x)
x=1000
log(x)
sample()
sample
?sample
install.packages(KernSmooth)
install.packages("KernSmooth")
library (KernSmooth)
install.packages (R0)
install.packages(R0)
install.packages(R0 1.2-6)
install.packages("R0")
install.packages("RSurveillance","Rsurvey")
x <- matrix(1:6, 2, 3)
x
x(1,2)
x(1, 2)
x[1, 2]
x[1,2]
x<-c(1,2,na,4,na,5)
x <- c(1,2,NA,4,NA,5)
x
bad <- is.na(x)
bad
x[!bad]
library(swirl)
ls
ls()
rm(list=ls())
swirl()
5+7
x<-5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x<-9
ls()
lsit.files()
list.files()
?lsit.files
?list.files
?args
args(list.files)
old.dir <- /Users/benjaminsinclair
old.dir <- Users/benjaminsinclair
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mystest.R")
file.info(mytest.R)
file.info("mytest.R")
?file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path(folder1, folder2)
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2"); file.path("testdir2", "testdir3")
dir.create(file.path("testdir2", testdir3), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
library(swirl)
swirl()
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- (num_vect < 1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Ben")
my_name
paste(my_name, collapse = "")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("x", "y", "z") sep = "")
paste(1:3, "x", "y", "z", sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, narf = NA)
elements <- c(foo = 11, bar = 2, narf = NA)
vect <- c("foo" = 11, "bar" = 2, "norf" = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matix <- my_vector
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
quit()
add2 <- function(x,y) {
x+y
}
add2(3,5)
add2 <- function(x,y) {x+y}
add2(5,3)
ls()
rm(ls_)
clear
rm(list=ls())
ls()
add2 <- function(x,y) {x+y}
add2(3,5)
x <- 1:20
above <- function(x, n=10) {
use <- x > 10
x[use]
}
above(x)
above(x, 15)
add3 <- function(x,y = 10){
x+y
}
add3(2, )
add3(2)
add3(4)
add3(3,3)
add3()
add3( , 2)
swirl()
library.swirl
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
(5 == 7) != FALSE
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
sys.date()
Sys.date()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function("My first function")
boring_function('My first function')
boring_function("My first function!")
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[tail]}, c(8, 4, 0))
evaluate(function(x){x[tail(dat)]}, c(8,4,0))
evaluate(function(x) {x[3]}, c(8, 4, 0))
info()
evaluate(function(x){x[tail(dat)]}, c(8,4,0))
evaluate(function(x){x[tail(dat)]}, dat = c(8,4,0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[-]}, c(8, 4, 0))
evaluate(function(x){x[-0]}, c(8, 4, 0))
evaluate(function(x){x[-0]}, c(8, 4, 1))
evaluate(function(x){x[-1]}, c(8, 4, 1))
evaluate(function(x){x[length(x)]}, c(8, 4, 1))
library(swirl)
ls()
rm(list=ls())
swirl()
evaluate(function(x){x[length(x)]}, c(8, 4, 1))
info
skip()
?paste
paste("programmin", "is", "fun!")
paste("Programming", "is", "fun!")
telegram <- function(..., x = "start", y = "stop"){
x, ..., y
}
?...
telegram <- function(..., x = "start", y = "stop"){
x, y, ...
}
skip()
telegram("R is hard")
submit()
submit()
submit()
submit
submit()
mad_libs(school, sucky, dog)
mad_libs(Seattle, sucky, dog)
mad_libs <- function(...){
listargs <- list(...)
place <- listargs[1]
adjective <- listargs[2]
noun <- listargs[3]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
submit()
submit()
skip()
'I' %p% 'love' %p% 'R!'
list()
ls()
rm(list=ls())
ls()
library(datasets)
data("iris")
?summary
?iris
dim(iris)
summary(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
source(cachematrix.R)
pwd()
getwd()
setwd(~/benjaminsinclair/Desktop/GitHub)
setwd(Desktop)
setwd("~/Desktop/GitHub/ProgrammingAssignment2")
source(cachematrix.R)
setwd("~/Desktop/GitHub/ProgrammingAssignment2")
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <-makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2,2,1,4), 2, 2))
my_mattrix$get
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if (!is.null(inv)) {
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
